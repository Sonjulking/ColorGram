Index: src/modules/user/UserView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package modules.user;\r\n\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.VBox;\r\n\r\npublic class UserView extends BorderPane {\r\n    public UserView() {\r\n        // 상단 타이틀\r\n        Label title = new Label(\"유저 화면입니다!\");\r\n        title.setStyle(\"-fx-font-size: 20px; -fx-font-weight: bold;\");\r\n        VBox topBox = new VBox(title);\r\n        topBox.setAlignment(Pos.CENTER);\r\n        topBox.setPadding(new Insets(10));\r\n\r\n        // 하단 버튼들\r\n        Button homeBtn = new Button(\"홈\");\r\n        Button settingBtn = new Button(\"설정\");\r\n        HBox bottomBox = new HBox(20, homeBtn, settingBtn);\r\n        bottomBox.setAlignment(Pos.CENTER);\r\n        bottomBox.setPadding(new Insets(20));\r\n\r\n        this.setTop(topBox);\r\n        this.setBottom(bottomBox);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/user/UserView.java b/src/modules/user/UserView.java
--- a/src/modules/user/UserView.java	(revision 0a462eeb9af5a7e696a20de581688fe78e43cdee)
+++ b/src/modules/user/UserView.java	(date 1743639986835)
@@ -2,29 +2,988 @@
 
 import javafx.geometry.Insets;
 import javafx.geometry.Pos;
+import javafx.scene.control.Alert;
 import javafx.scene.control.Button;
+import javafx.scene.control.ButtonType;
 import javafx.scene.control.Label;
-import javafx.scene.layout.BorderPane;
+import javafx.scene.control.PasswordField;
+import javafx.scene.control.TextField;
+import javafx.scene.layout.GridPane;
 import javafx.scene.layout.HBox;
 import javafx.scene.layout.VBox;
 
-public class UserView extends BorderPane {
+public class UserView extends VBox {
+
+    private TextField idField;
+    private PasswordField passwordField;
+    private Button loginButton;
+    private Button registerButton;
+
+    // 로그인 상태 추가
+    private static boolean isLogIn = false;
+
+    // 로그인 성공 시 실행할 콜백 인터페이스
+    private static Runnable onLoginSuccess;
+
+    // 현재 로그인 중인 사용자 ID 저장
+    private static String currentUserId = null;
+
+    // 기본 생성자
     public UserView() {
-        // 상단 타이틀
-        Label title = new Label("유저 화면입니다!");
-        title.setStyle("-fx-font-size: 20px; -fx-font-weight: bold;");
-        VBox topBox = new VBox(title);
-        topBox.setAlignment(Pos.CENTER);
-        topBox.setPadding(new Insets(10));
+        if (isLogIn && currentUserId != null) {
+            selectUserInfo();
+        } else {
+            setupLoginView();
+        }
+    }
+
+    // 사용자 ID 설정 메서드
+    public static void setCurrentUserId(String userId) {
+        currentUserId = userId;
+    }
+
+    // 현재 사용자 ID 반환 메서드
+    public static String getCurrentUserId() {
+        return currentUserId;
+    }
+
+    // 로그인 상태 확인 메서드
+    public static boolean isLogIn() {
+        return isLogIn;
+    }
+
+    // 로그아웃 메서드 - 콜백은 유지하면서 로그아웃처리
+    public void logout() {
+        setLogIn(false);
+        setCurrentUserId(null);
+        getChildren().clear();
+        setupLoginView();
+    }
+
+    // 로그인 성공 콜백 설정 메서드
+    public void setOnLoginSuccess(Runnable callback) {
+        UserView.onLoginSuccess = callback;
+    }
+
+    // 로그인 화면 UI 구성 메서드
+    private void setupLoginView() {
+        setPadding(new Insets(20));
+        setAlignment(Pos.CENTER);
+        setSpacing(20);
+
+        // 타이틀
+        Label titleLabel = new Label("ColorGram 로그인");
+        titleLabel.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");
+
+        // 로그인 폼
+        GridPane formGrid = new GridPane();
+        formGrid.setHgap(10);
+        formGrid.setVgap(10);
+        formGrid.setAlignment(Pos.CENTER);
+
+        Label idLabel = new Label("아이디:");
+        Label passwordLabel = new Label("비밀번호:");
+
+        idField = new TextField();
+        idField.setPromptText("아이디를 입력하세요");
+
+        passwordField = new PasswordField();
+        passwordField.setPromptText("비밀번호를 입력하세요");
+
+        formGrid.add(idLabel, 0, 0);
+        formGrid.add(idField, 1, 0);
+        formGrid.add(passwordLabel, 0, 1);
+        formGrid.add(passwordField, 1, 1);
+
+        // 버튼 영역
+        HBox buttonBox = new HBox(10);
+        buttonBox.setAlignment(Pos.CENTER);
+
+        loginButton = new Button("로그인");
+        registerButton = new Button("회원가입");
+
+        // 로그인 버튼 이벤트
+        loginButton.setOnAction(e -> {
+            String id = idField.getText();
+            String password = passwordField.getText();
+
+            if (id.isEmpty() || password.isEmpty()) {
+                showAlert("오류", "아이디와 비밀번호를 모두 입력하세요.");
+                return;
+            }
+
+            UserDAO userDAO = new UserDAO();
+            if (userDAO.selectUserLogin(id, password)) {
+                showAlert("로그인 성공", "로그인에 성공했습니다.");
+                // 로그인 상태 변경
+                setLogIn(true);
+                // 현재 사용자 ID 저장
+                setCurrentUserId(id);
+
+                // 로그인 성공 콜백 실행
+                if (onLoginSuccess != null) {
+                    onLoginSuccess.run();
+                }
+            } else {
+                showAlert("로그인 실패", "아이디 또는 비밀번호가 일치하지 않습니다.");
+            }
+        });
+
+        // 회원가입 버튼 이벤트
+        registerButton.setOnAction(e -> {
+            // VBox의 내용을 회원가입 폼으로 변경
+            getChildren().clear();
+            insertUserDataForm();
+        });
+
+        buttonBox.getChildren().addAll(loginButton, registerButton);
+
+        // 화면에 추가
+        getChildren().addAll(titleLabel, formGrid, buttonBox);
+    }
+
+    // 회원가입 화면 UI 구성 메소드
+    private void insertUserDataForm() {
+        setPadding(new Insets(20));
+        setAlignment(Pos.CENTER);
+        setSpacing(20);
+
+        // 타이틀
+        Label titleLabel = new Label("ColorGram 회원가입");
+        titleLabel.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");
+
+        // 회원가입 폼
+        GridPane formGrid = new GridPane();
+        formGrid.setHgap(10);
+        formGrid.setVgap(10);
+        formGrid.setAlignment(Pos.CENTER);
+
+        // 중복 상태 추적 변수
+        final boolean[] isIdChecked = {false};
+        final boolean[] isNicknameChecked = {false};
+
+        // 1. 닉네임 필드
+        Label nickLabel = new Label("닉네임:");
+        TextField nickField = new TextField();
+        nickField.setPromptText("닉네임을 입력하세요");
+
+        // 닉네임 중복 확인 버튼
+        Button checkNickButton = new Button("중복확인");
+        HBox nickBox = new HBox(10, nickField, checkNickButton);
+
+        // 닉네임 중복 확인 버튼 이벤트
+        checkNickButton.setOnAction(event -> {
+            String nickname = nickField.getText().trim();
+
+            // 입력 검증
+            if (nickname.isEmpty()) {
+                showAlert("입력 오류", "닉네임을 입력해주세요.");
+                isNicknameChecked[0] = false;
+                return;
+            }
+
+            showAlert("확인", "사용 가능한 닉네임입니다.");
+            isNicknameChecked[0] = true;
+        });
+
+        // 닉네임 필드 변경 시 체크 상태 초기화
+        nickField.textProperty().addListener((observable, oldValue, newValue) -> {
+            isNicknameChecked[0] = false;
+        });
+
+        // 2. 아이디 필드
+        Label idLabel = new Label("아이디:");
+        TextField idField = new TextField();
+        idField.setPromptText("아이디를 입력하세요");
+
+        // 아이디 중복 확인 버튼
+        Button checkIdButton = new Button("중복확인");
+        HBox idBox = new HBox(10, idField, checkIdButton);
+
+        // 중복 확인 버튼 이벤트
+        checkIdButton.setOnAction(event -> {
+            String id = idField.getText().trim();
+
+            // 입력 검증
+            if (id.isEmpty()) {
+                showAlert("입력 오류", "아이디를 입력해주세요.");
+                isIdChecked[0] = false;
+                return;
+            }
+
+            // 중복 검사
+            UserDAO userDAO = new UserDAO();
+            if (userDAO.isUserIdDupe(id)) {
+                showAlert("확인", "사용 가능한 아이디입니다.");
+                isIdChecked[0] = true;
+            } else {
+                showAlert("중복 오류", "이미 사용 중인 아이디입니다. 다른 아이디를 입력해주세요.");
+                isIdChecked[0] = false;
+            }
+        });
+
+        // 아이디 필드 변경 시 체크 상태 초기화
+        idField.textProperty().addListener((observable, oldValue, newValue) -> {
+            isIdChecked[0] = false;
+        });
+
+        // 3. 비밀번호 필드
+        Label passwordLabel = new Label("비밀번호:");
+        PasswordField passwordField = new PasswordField();
+        passwordField.setPromptText("비밀번호를 입력하세요");
+
+        // 4. 이메일 필드 - 선택 사항임을 표시
+        Label emailLabel = new Label("이메일 (선택사항):");
+        TextField emailField = new TextField();
+        emailField.setPromptText("이메일을 입력하세요 (선택사항)");
+
+        // 폼에 필드 추가 - 순서 변경됨
+        formGrid.add(nickLabel, 0, 0);
+        formGrid.add(nickBox, 1, 0);
+        formGrid.add(idLabel, 0, 1);
+        formGrid.add(idBox, 1, 1);
+        formGrid.add(passwordLabel, 0, 2);
+        formGrid.add(passwordField, 1, 2);
+        formGrid.add(emailLabel, 0, 3);
+        formGrid.add(emailField, 1, 3);
+
+        // 버튼 영역
+        HBox buttonBox = new HBox(10);
+        buttonBox.setAlignment(Pos.CENTER);
+
+        Button registerBtn = new Button("가입하기");
+        Button cancelBtn = new Button("취소");
+
+        // 회원가입 버튼 이벤트
+        registerBtn.setOnAction(e -> {
+            String nickname = nickField.getText();
+            String id = idField.getText();
+            String password = passwordField.getText();
+            String email = emailField.getText();
+
+            // 필수 입력 검증 (이메일 제외)
+            if (nickname.isEmpty() || id.isEmpty() || password.isEmpty()) {
+                showAlert("입력 오류", "닉네임, 아이디, 비밀번호는 필수 입력 항목입니다.");
+                return;
+            }
+
+            // 닉네임 중복 확인 검사
+            if (!isNicknameChecked[0]) {
+                showAlert("닉네임 확인 필요", "닉네임 중복 확인을 먼저 해주세요.");
+                return;
+            }
+
+            // 아이디 중복 확인 검사
+            if (!isIdChecked[0]) {
+                showAlert("아이디 확인 필요", "아이디 중복 확인을 먼저 해주세요.");
+                return;
+            }
+
+            // 이메일이 입력된 경우에만 검증
+            if (!email.isEmpty()) {
+                // 이메일 형식 검증 - 정규식 사용
+                String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
+                if (!email.matches(emailRegex)) {
+                    showAlert("이메일 형식 오류", "올바른 이메일 형식이 아닙니다. (예: example@domain.com)");
+                    return;
+                }
+
+                // 이메일 중복 검사
+                UserDAO checkDao = new UserDAO();
+                if (!checkDao.isUserIdDupe(email)) {
+                    showAlert("이메일 중복", "이미 사용 중인 이메일입니다. 다른 이메일을 사용해주세요.");
+                    return;
+                }
+            }
+
+            // VO 객체 생성
+            UserVO user = new UserVO();
+            user.setUserNickname(nickname);
+            user.setUserId(id);
+            user.setUserPassword(password);
+            user.setUserEmail(email); // 빈 문자열이면 null로 저장될 것임
+
+            // 데이터베이스에 저장
+            UserDAO userDAO = new UserDAO();
+            boolean result = userDAO.insertUser(user);
+
+            if (result) {
+                showAlert("회원가입 성공", "회원가입이 완료되었습니다. 로그인해주세요.");
+                // 로그인 화면으로 돌아가기
+                getChildren().clear();
+                setupLoginView();
+            } else {
+                showAlert("회원가입 실패", "회원가입 중 오류가 발생했습니다. 다시 시도해주세요.");
+            }
+        });
+
+        // 취소 버튼 이벤트
+        cancelBtn.setOnAction(e -> {
+            // 로그인 화면으로 돌아가기
+            getChildren().clear();
+            setupLoginView();
+        });
+
+        buttonBox.getChildren().addAll(registerBtn, cancelBtn);
+
+        // 화면에 추가
+        getChildren().addAll(titleLabel, formGrid, buttonBox);
+    }
+
+    // 알림창 표시
+    private void showAlert(String title, String content) {
+        Alert alert = new Alert(Alert.AlertType.INFORMATION);
+        alert.setTitle(title);
+        alert.setHeaderText(null);
+        alert.setContentText(content);
+        alert.showAndWait();
+    }
+
+    // 사용자 정보 화면 구성 메소드
+    private void selectUserInfo() {
+        setPadding(new Insets(20));
+        setAlignment(Pos.CENTER);
+        setSpacing(20);
+
+        // 타이틀
+        Label titleLabel = new Label("사용자 정보");
+        titleLabel.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");
+
+        // 사용자 정보 가져오기
+        UserDAO userDAO = new UserDAO();
+        UserVO userInfo = userDAO.selectUser(currentUserId);
+
+        if (userInfo == null) {
+            // 사용자 정보를 가져오지 못한 경우 에러 메시지 표시
+            Label errorLabel = new Label("사용자 정보를 불러올 수 없습니다.");
+            errorLabel.setStyle("-fx-text-fill: red;");
+
+            Button backButton = new Button("돌아가기");
+            backButton.setOnAction(e -> {
+                // 로그인 화면으로 돌아가기
+                getChildren().clear();
+                setupLoginView();
+            });
+
+            getChildren().addAll(titleLabel, errorLabel, backButton);
+            return;
+        }
+
+        // 사용자 정보 표시 영역
+        GridPane infoGrid = new GridPane();
+        infoGrid.setHgap(15);
+        infoGrid.setVgap(15);
+        infoGrid.setAlignment(Pos.CENTER);
+
+        // 정보 레이블들 - 순서 변경: 닉네임, 아이디 (이메일 제거)
+        Label nicknameLabel = new Label("닉네임:");
+        Label nicknameValueLabel = new Label(userInfo.getUserNickname());
+        nicknameValueLabel.setStyle("-fx-font-weight: bold;");
+
+        Label idLabel = new Label("아이디:");
+        Label idValueLabel = new Label(userInfo.getUserId());
+        idValueLabel.setStyle("-fx-font-weight: bold;");
+
+        // 그리드에 정보 추가 - 순서 변경됨, 이메일 제거
+        infoGrid.add(nicknameLabel, 0, 0);
+        infoGrid.add(nicknameValueLabel, 1, 0);
+        infoGrid.add(idLabel, 0, 1);
+        infoGrid.add(idValueLabel, 1, 1);
+
+        // 버튼 영역
+        HBox buttonBox = new HBox(10);
+        buttonBox.setAlignment(Pos.CENTER);
+
+        Button logoutButton = new Button("로그아웃");
+        Button editButton = new Button("정보 수정");
+        Button deleteAccountButton = new Button("회원탈퇴");
+        deleteAccountButton.setStyle("-fx-text-fill: red;"); // 회원탈퇴 버튼을 붉은색으로 표시
+
+        // 로그아웃 버튼 이벤트
+        logoutButton.setOnAction(e -> {
+            // 로그아웃 처리 - 콜백은 유지
+            setLogIn(false);
+            setCurrentUserId(null);
+
+            // 로그인 화면으로 전환
+            getChildren().clear();
+            setupLoginView();
+
+            showAlert("로그아웃", "로그아웃되었습니다.");
+        });
+
+        // 정보 수정 버튼 이벤트
+        editButton.setOnAction(e -> {
+            // 비밀번호 확인 화면으로 전환
+            getChildren().clear();
+            setupPasswordConfirmationForm(userInfo);
+        });
+
+        // 회원탈퇴 버튼 이벤트
+        deleteAccountButton.setOnAction(e -> {
+            // 회원탈퇴 확인을 위한 비밀번호 확인 화면으로 전환
+            getChildren().clear();
+            setupDeleteAccountConfirmation(userInfo);
+        });
+
+        buttonBox.getChildren().addAll(editButton, logoutButton, deleteAccountButton);
+
+        // 화면에 추가
+        getChildren().addAll(titleLabel, infoGrid, buttonBox);
+    }
+
+    // 비밀번호 확인 화면 구성 메서드
+    private void setupPasswordConfirmationForm(UserVO userInfo) {
+        setPadding(new Insets(20));
+        setAlignment(Pos.CENTER);
+        setSpacing(20);
+
+        // 타이틀
+        Label titleLabel = new Label("본인 확인");
+        titleLabel.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");
+
+        // 안내 메시지
+        Label infoLabel = new Label("정보 수정을 위해 현재 비밀번호를 입력해주세요.");
+        infoLabel.setStyle("-fx-font-size: 14px;");
+
+        // 비밀번호 입력 영역
+        VBox passwordBox = new VBox(15);
+        passwordBox.setAlignment(Pos.CENTER);
+
+        Label passwordLabel = new Label("현재 비밀번호:");
+        PasswordField passwordField = new PasswordField();
+        passwordField.setPromptText("현재 비밀번호를 입력하세요");
+        passwordField.setPrefWidth(250);
+
+        passwordBox.getChildren().addAll(passwordLabel, passwordField);
+
+        // 버튼 영역
+        HBox buttonBox = new HBox(15);
+        buttonBox.setAlignment(Pos.CENTER);
+
+        Button confirmButton = new Button("확인");
+        Button cancelButton = new Button("취소");
+
+        // 버튼 생성 후 엔터 키 이벤트 설정
+        passwordField.setOnAction(e -> {
+            // 엔터 키를 누르면 확인 버튼 클릭과 동일한 효과
+            confirmButton.fire();
+        });
+
+        // 확인 버튼 이벤트
+        confirmButton.setOnAction(e -> {
+            String inputPassword = passwordField.getText();
+
+            if (inputPassword.isEmpty()) {
+                showAlert("입력 오류", "비밀번호를 입력해주세요.");
+                return;
+            }
+
+            UserDAO userDAO = new UserDAO();
+            // 입력한 비밀번호와 현재 사용자의 비밀번호 비교
+            if (userDAO.selectUserLogin(userInfo.getUserId(), inputPassword)) {
+                // 비밀번호 일치, 정보 수정 화면으로 이동
+                getChildren().clear();
+                setupEditProfileForm(userInfo);
+            } else {
+                // 비밀번호 불일치
+                showAlert("인증 실패", "비밀번호가 일치하지 않습니다.");
+            }
+        });
+
+        // 취소 버튼 이벤트
+        cancelButton.setOnAction(e -> {
+            // 사용자 정보 화면으로 돌아가기
+            getChildren().clear();
+            selectUserInfo();
+        });
+
+        buttonBox.getChildren().addAll(confirmButton, cancelButton);
+
+        // 화면에 추가
+        getChildren().addAll(titleLabel, infoLabel, passwordBox, buttonBox);
+    }
+
+    // 회원탈퇴 비밀번호 확인 화면 구성 메소드
+    private void setupDeleteAccountConfirmation(UserVO userInfo) {
+        setPadding(new Insets(20));
+        setAlignment(Pos.CENTER);
+        setSpacing(20);
+
+        // 타이틀
+        Label titleLabel = new Label("회원탈퇴 확인");
+        titleLabel.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");
+
+        // 경고 메시지
+        Label warningLabel = new Label("주의: 회원탈퇴 시 모든 정보가 영구적으로 삭제됩니다.");
+        warningLabel.setStyle("-fx-text-fill: red; -fx-font-size: 14px;");
+
+        // 안내 메시지
+        Label infoLabel = new Label("정확한 본인 확인을 위해 현재 비밀번호를 입력해주세요.");
+        infoLabel.setStyle("-fx-font-size: 14px;");
+
+        // 비밀번호 입력 영역
+        VBox passwordBox = new VBox(15);
+        passwordBox.setAlignment(Pos.CENTER);
+
+        Label passwordLabel = new Label("현재 비밀번호:");
+        PasswordField passwordField = new PasswordField();
+        passwordField.setPromptText("비밀번호를 입력하세요");
+        passwordField.setPrefWidth(250);
+
+        passwordBox.getChildren().addAll(passwordLabel, passwordField);
+
+        // 버튼 영역
+        HBox buttonBox = new HBox(15);
+        buttonBox.setAlignment(Pos.CENTER);
+
+        Button confirmButton = new Button("탈퇴하기");
+        confirmButton.setStyle("-fx-text-fill: red;");
+        Button cancelButton = new Button("취소");
+
+        // 엔터 키 이벤트 설정
+        passwordField.setOnAction(e -> confirmButton.fire());
+
+        // 확인 버튼 이벤트
+        confirmButton.setOnAction(e -> {
+            String inputPassword = passwordField.getText();
+
+            if (inputPassword.isEmpty()) {
+                showAlert("입력 오류", "비밀번호를 입력해주세요.");
+                return;
+            }
+
+            UserDAO userDAO = new UserDAO();
+            // 입력한 비밀번호와 현재 사용자의 비밀번호 비교
+            if (userDAO.selectUserLogin(userInfo.getUserId(), inputPassword)) {
+                // 비밀번호 일치, 최종 확인 다이얼로그 표시
+                showFinalConfirmationDialog(userInfo.getUserId());
+            } else {
+                // 비밀번호 불일치
+                showAlert("인증 실패", "비밀번호가 일치하지 않습니다.");
+            }
+        });
+
+        // 취소 버튼 이벤트
+        cancelButton.setOnAction(e -> {
+            // 사용자 정보 화면으로 돌아가기
+            getChildren().clear();
+            selectUserInfo();
+        });
+
+        buttonBox.getChildren().addAll(confirmButton, cancelButton);
+
+        // 화면에 추가
+        getChildren().addAll(titleLabel, warningLabel, infoLabel, passwordBox, buttonBox);
+    }
+
+    // 회원탈퇴 최종 확인 다이얼로그
+    private void showFinalConfirmationDialog(String userId) {
+        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
+        alert.setTitle("회원탈퇴 최종 확인");
+        alert.setHeaderText("정말로 탈퇴하시겠습니까?");
+        alert.setContentText("이 작업은 취소할 수 없으며, 모든 사용자 정보가 영구적으로 삭제됩니다.");
+
+        // 버튼 텍스트 변경
+        ((Button) alert.getDialogPane().lookupButton(ButtonType.OK)).setText("탈퇴");
+        ((Button) alert.getDialogPane().lookupButton(ButtonType.CANCEL)).setText("취소");
+
+        alert.showAndWait().ifPresent(response -> {
+            if (response == ButtonType.OK) {
+                // 사용자 삭제 실행
+                UserDAO userDAO = new UserDAO();
+                boolean result = userDAO.deleteUser(userId);
+
+                if (result) {
+                    showAlert("탈퇴 완료", "회원탈퇴가 완료되었습니다.");
+
+                    // 로그아웃 처리
+                    setLogIn(false);
+                    setCurrentUserId(null);
+
+                    // 로그인 화면으로 전환
+                    getChildren().clear();
+                    setupLoginView();
+                } else {
+                    showAlert("탈퇴 실패", "회원탈퇴 처리 중 오류가 발생했습니다. 다시 시도해주세요.");
+
+                    // 사용자 정보 화면으로 돌아가기
+                    getChildren().clear();
+                    selectUserInfo();
+                }
+            } else {
+                // 취소 시 사용자 정보 화면으로 돌아가기
+                getChildren().clear();
+                selectUserInfo();
+            }
+        });
+    }
+
+    // 정보 수정 화면 구성 메소드
+    private void setupEditProfileForm(UserVO userInfo) {
+        setPadding(new Insets(20));
+        setAlignment(Pos.CENTER);
+        setSpacing(20);
+
+        // 타이틀
+        Label titleLabel = new Label("회원 정보 수정");
+        titleLabel.setStyle("-fx-font-size: 24px; -fx-font-weight: bold;");
+
+        // 수정 폼
+        GridPane formGrid = new GridPane();
+        formGrid.setHgap(15);
+        formGrid.setVgap(15);
+        formGrid.setAlignment(Pos.CENTER);
+
+        // 중복 확인 상태 변수
+        final boolean[] isNicknameAvailable = {true}; // 현재 닉네임은 이미 사용 중이므로 true로 초기화
+        final boolean[] isIdAvailable = {true}; // 현재 아이디는 이미 사용 중이므로 true로 초기화
+        final String[] originalId = {userInfo.getUserId()}; // 원래 아이디 저장
+        final String[] originalNickname = {userInfo.getUserNickname()}; // 원래 닉네임 저장
+
+        // 1. 닉네임 수정 필드
+        Label nicknameLabel = new Label("닉네임:");
+        TextField nicknameField = new TextField(userInfo.getUserNickname());
+
+        // 닉네임 중복 확인 버튼
+        Button checkNickButton = new Button("중복확인");
+        HBox nickBox = new HBox(10, nicknameField, checkNickButton);
+
+        // 닉네임 중복 확인 버튼 이벤트
+        checkNickButton.setOnAction(event -> {
+            String newNickname = nicknameField.getText().trim();
+
+            // 입력 검증
+            if (newNickname.isEmpty()) {
+                showAlert("입력 오류", "닉네임을 입력해주세요.");
+                isNicknameAvailable[0] = false;
+                return;
+            }
+
+            // 현재 닉네임과 동일하면 중복 체크 불필요
+            if (newNickname.equals(originalNickname[0])) {
+                showAlert("확인", "현재 사용 중인 닉네임입니다.");
+                isNicknameAvailable[0] = true;
+                return;
+            }
+
+            // 중복 검사 - 실제로는 이 부분에 닉네임 중복 검사 로직이 필요합니다.
+            // 현재는 항상 사용 가능하다고 가정합니다.
+            showAlert("확인", "사용 가능한 닉네임입니다.");
+            isNicknameAvailable[0] = true;
+        });
+
+        // 닉네임 필드 변경 시 체크 상태 초기화
+        nicknameField.textProperty().addListener((observable, oldValue, newValue) -> {
+            if (!newValue.equals(originalNickname[0])) {
+                isNicknameAvailable[0] = false;
+            } else {
+                isNicknameAvailable[0] = true;
+            }
+        });
+
+        // 2. 아이디 수정 필드
+        Label idLabel = new Label("아이디:");
+        TextField idField = new TextField(userInfo.getUserId());
+
+        // 아이디 중복 확인 버튼
+        Button checkIdButton = new Button("중복확인");
+        HBox idBox = new HBox(10, idField, checkIdButton);
+
+        // 아이디 중복 확인 버튼 이벤트
+        checkIdButton.setOnAction(event -> {
+            String newId = idField.getText().trim();
+
+            // 입력 검증
+            if (newId.isEmpty()) {
+                showAlert("입력 오류", "아이디를 입력해주세요.");
+                isIdAvailable[0] = false;
+                return;
+            }
+
+            // 현재 아이디와 동일하면 중복 체크 불필요
+            if (newId.equals(originalId[0])) {
+                showAlert("확인", "현재 사용 중인 아이디입니다.");
+                isIdAvailable[0] = true;
+                return;
+            }
+
+            // 중복 검사
+            UserDAO userDAO = new UserDAO();
+            if (userDAO.isUserIdDupe(newId)) {
+                showAlert("확인", "사용 가능한 아이디입니다.");
+                isIdAvailable[0] = true;
+            } else {
+                showAlert("중복 오류", "이미 사용 중인 아이디입니다. 다른 아이디를 입력해주세요.");
+                isIdAvailable[0] = false;
+            }
+        });
+
+        // 아이디 필드 변경 시 체크 상태 초기화
+        idField.textProperty().addListener((observable, oldValue, newValue) -> {
+            if (!newValue.equals(originalId[0])) {
+                isIdAvailable[0] = false;
+            } else {
+                isIdAvailable[0] = true;
+            }
+        });
+
+        // 3. 이메일 필드 - 이미 있으면 읽기 전용으로 표시, 없으면 입력 가능
+        Label emailLabel = new Label("이메일:");
+
+        // 4. 새 비밀번호 필드
+        Label passwordLabel = new Label("새 비밀번호:");
+        PasswordField passwordField = new PasswordField();
+        passwordField.setPromptText("변경할 비밀번호 입력");
+
+        // 5. 새 비밀번호 확인 필드
+        Label passwordConfirmLabel = new Label("비밀번호 확인:");
+        PasswordField passwordConfirmField = new PasswordField();
+        passwordConfirmField.setPromptText("비밀번호 확인");
+
+        // 버튼 영역
+        HBox buttonBox = new HBox(15);
+        buttonBox.setAlignment(Pos.CENTER);
+
+        Button saveButton = new Button("저장");
+        Button cancelButton = new Button("취소");
+
+        // 이메일 필드 처리 - 이미 있으면 읽기 전용, 없으면 입력 가능
+        if (userInfo.getUserEmail() != null && !userInfo.getUserEmail().isEmpty()) {
+            // 이메일이 이미 있는 경우 - 읽기 전용 레이블로 표시
+            Label emailValueLabel = new Label(userInfo.getUserEmail());
+            emailValueLabel.setStyle("-fx-font-weight: bold;");
+
+            // 그리드에 정보 추가 - 순서 변경됨
+            formGrid.add(nicknameLabel, 0, 0);
+            formGrid.add(nickBox, 1, 0);
+            formGrid.add(idLabel, 0, 1);
+            formGrid.add(idBox, 1, 1);
+            formGrid.add(emailLabel, 0, 2);
+            formGrid.add(emailValueLabel, 1, 2);
+            formGrid.add(passwordLabel, 0, 3);
+            formGrid.add(passwordField, 1, 3);
+            formGrid.add(passwordConfirmLabel, 0, 4);
+            formGrid.add(passwordConfirmField, 1, 4);
+
+            // 이메일이 이미 있는 경우, 이메일 수정 없이 다른 정보만 변경 가능한 이벤트 핸들러 사용
+            saveButton.setOnAction(e -> {
+                UserDAO userDAO = new UserDAO();
+                boolean isUpdated = false;
+                boolean hasErrors = false;
+
+                // 닉네임 업데이트 시도
+                String newNickname = nicknameField.getText().trim();
+                if (!newNickname.isEmpty() && !newNickname.equals(userInfo.getUserNickname())) {
+                    // 중복 확인했는지 체크
+                    if (!isNicknameAvailable[0]) {
+                        hasErrors = true;
+                        showAlert("닉네임 변경 오류", "닉네임 중복 확인을 먼저 해주세요.");
+                    } else {
+                        // 닉네임 업데이트 (현재 아이디 사용)
+                        if (userDAO.updateUserNickname(userInfo.getUserId(), newNickname)) {
+                            isUpdated = true;
+                        } else {
+                            hasErrors = true;
+                            showAlert("닉네임 변경 실패", "닉네임 변경 중 오류가 발생했습니다.");
+                        }
+                    }
+                }
+
+                // 아이디 업데이트 시도
+                String newId = idField.getText().trim();
+                if (!newId.isEmpty() && !newId.equals(originalId[0])) {
+                    // 중복 확인했는지 체크
+                    if (!isIdAvailable[0]) {
+                        hasErrors = true;
+                        showAlert("아이디 변경 오류", "아이디 중복 확인을 먼저 해주세요.");
+                    } else {
+                        // 아이디 업데이트
+                        if (userDAO.updateUserId(originalId[0], newId)) {
+                            isUpdated = true;
+                            // 현재 세션의 사용자 ID 업데이트
+                            setCurrentUserId(newId);
+                        } else {
+                            hasErrors = true;
+                            showAlert("아이디 변경 실패", "아이디 변경 중 오류가 발생했습니다.");
+                        }
+                    }
+                }
+
+                // 비밀번호 업데이트 시도
+                String newPassword = passwordField.getText();
+                String confirmPassword = passwordConfirmField.getText();
+
+                if (!newPassword.isEmpty()) {
+                    if (newPassword.equals(confirmPassword)) {
+                        String currentId = getCurrentUserId(); // 현재 ID는 업데이트 됐을 수 있음
+                        if (userDAO.updateUserPassword(currentId, newPassword)) {
+                            isUpdated = true;
+                        } else {
+                            hasErrors = true;
+                            showAlert("비밀번호 변경 실패", "비밀번호 변경 중 오류가 발생했습니다.");
+                        }
+                    } else {
+                        hasErrors = true;
+                        showAlert("비밀번호 불일치", "입력한 비밀번호가 일치하지 않습니다.");
+                    }
+                }
+
+                // 업데이트 결과 처리
+                if (isUpdated && !hasErrors) {
+                    showAlert("업데이트 성공", "회원 정보가 성공적으로 업데이트되었습니다.");
+
+                    // 유저 정보 갱신된 화면으로 돌아가기
+                    getChildren().clear();
+                    selectUserInfo();
+                } else if (!isUpdated && !hasErrors) {
+                    showAlert("변경 사항 없음", "변경된 정보가 없습니다.");
+
+                    // 유저 정보 화면으로 돌아가기
+                    getChildren().clear();
+                    selectUserInfo();
+                }
+            });
+
+        } else {
+            // 이메일이 없는 경우 - 입력 필드 표시
+            TextField emailField = new TextField();
+            emailField.setPromptText("이메일을 입력하세요 (선택사항)");
+
+            // 그리드에 정보 추가 - 순서 변경됨
+            formGrid.add(nicknameLabel, 0, 0);
+            formGrid.add(nickBox, 1, 0);
+            formGrid.add(idLabel, 0, 1);
+            formGrid.add(idBox, 1, 1);
+            formGrid.add(emailLabel, 0, 2);
+            formGrid.add(emailField, 1, 2);
+            formGrid.add(passwordLabel, 0, 3);
+            formGrid.add(passwordField, 1, 3);
+            formGrid.add(passwordConfirmLabel, 0, 4);
+            formGrid.add(passwordConfirmField, 1, 4);
+
+            // 이메일이 없는 경우, 이메일 추가 기능이 있는 이벤트 핸들러 사용
+            saveButton.setOnAction(e -> {
+                UserDAO userDAO = new UserDAO();
+                boolean isUpdated = false;
+                boolean hasErrors = false;
+
+                // 닉네임 업데이트 시도
+                String newNickname = nicknameField.getText().trim();
+                if (!newNickname.isEmpty() && !newNickname.equals(userInfo.getUserNickname())) {
+                    // 중복 확인했는지 체크
+                    if (!isNicknameAvailable[0]) {
+                        hasErrors = true;
+                        showAlert("닉네임 변경 오류", "닉네임 중복 확인을 먼저 해주세요.");
+                    } else {
+                        // 닉네임 업데이트 (현재 아이디 사용)
+                        if (userDAO.updateUserNickname(userInfo.getUserId(), newNickname)) {
+                            isUpdated = true;
+                        } else {
+                            hasErrors = true;
+                            showAlert("닉네임 변경 실패", "닉네임 변경 중 오류가 발생했습니다.");
+                        }
+                    }
+                }
+
+                // 아이디 업데이트 시도
+                String newId = idField.getText().trim();
+                if (!newId.isEmpty() && !newId.equals(originalId[0])) {
+                    // 중복 확인했는지 체크
+                    if (!isIdAvailable[0]) {
+                        hasErrors = true;
+                        showAlert("아이디 변경 오류", "아이디 중복 확인을 먼저 해주세요.");
+                    } else {
+                        // 아이디 업데이트
+                        if (userDAO.updateUserId(originalId[0], newId)) {
+                            isUpdated = true;
+                            // 현재 세션의 사용자 ID 업데이트
+                            setCurrentUserId(newId);
+                        } else {
+                            hasErrors = true;
+                            showAlert("아이디 변경 실패", "아이디 변경 중 오류가 발생했습니다.");
+                        }
+                    }
+                }
+
+                // 이메일 업데이트 시도 - 이메일이 없는 경우에만 실행
+                String newEmail = emailField.getText().trim();
+                if (!newEmail.isEmpty()) {
+                    // 이메일 형식 검증
+                    String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
+                    if (!newEmail.matches(emailRegex)) {
+                        hasErrors = true;
+                        showAlert("이메일 형식 오류", "올바른 이메일 형식이 아닙니다. (예: example@domain.com)");
+                    } else {
+                        // 이메일 중복 확인
+                        if (!userDAO.isUserEmailDupe(newEmail)) {
+                            hasErrors = true;
+                            showAlert("이메일 중복", "이미 사용 중인 이메일입니다.");
+                        } else {
+                            // 이메일 업데이트
+                            String currentId = getCurrentUserId(); // 현재 ID는 업데이트 됐을 수 있음
+                            if (userDAO.updateUserEmail(currentId, newEmail)) {
+                                isUpdated = true;
+                                showAlert("이메일 추가 안내", "이메일이 추가되었습니다. 추가된 이메일은 변경할 수 없습니다.");
+                            } else {
+                                hasErrors = true;
+                                showAlert("이메일 추가 실패", "이메일 추가 중 오류가 발생했습니다.");
+                            }
+                        }
+                    }
+                }
+
+                // 비밀번호 업데이트 시도
+                String newPassword = passwordField.getText();
+                String confirmPassword = passwordConfirmField.getText();
+
+                if (!newPassword.isEmpty()) {
+                    if (newPassword.equals(confirmPassword)) {
+                        String currentId = getCurrentUserId(); // 현재 ID는 업데이트 됐을 수 있음
+                        if (userDAO.updateUserPassword(currentId, newPassword)) {
+                            isUpdated = true;
+                        } else {
+                            hasErrors = true;
+                            showAlert("비밀번호 변경 실패", "비밀번호 변경 중 오류가 발생했습니다.");
+                        }
+                    } else {
+                        hasErrors = true;
+                        showAlert("비밀번호 불일치", "입력한 비밀번호가 일치하지 않습니다.");
+                    }
+                }
+
+                // 업데이트 결과 처리
+                if (isUpdated && !hasErrors) {
+                    showAlert("업데이트 성공", "회원 정보가 성공적으로 업데이트되었습니다.");
 
-        // 하단 버튼들
-        Button homeBtn = new Button("홈");
-        Button settingBtn = new Button("설정");
-        HBox bottomBox = new HBox(20, homeBtn, settingBtn);
-        bottomBox.setAlignment(Pos.CENTER);
-        bottomBox.setPadding(new Insets(20));
+                    // 유저 정보 갱신된 화면으로 돌아가기
+                    getChildren().clear();
+                    selectUserInfo();
+                } else if (!isUpdated && !hasErrors) {
+                    showAlert("변경 사항 없음", "변경된 정보가 없습니다.");
 
-        this.setTop(topBox);
-        this.setBottom(bottomBox);
+                    // 유저 정보 화면으로 돌아가기
+                    getChildren().clear();
+                    selectUserInfo();
+                }
+            });
+        }
+
+        // 취소 버튼 이벤트
+        cancelButton.setOnAction(e -> {
+            // 유저 정보 화면으로 돌아가기
+            getChildren().clear();
+            selectUserInfo();
+        });
+
+        buttonBox.getChildren().addAll(saveButton, cancelButton);
+
+        // 화면에 추가
+        getChildren().addAll(titleLabel, formGrid, buttonBox);
     }
-}
+
+    // 로그인 상태 설정 메서드
+    public static void setLogIn(boolean logIn) {
+        isLogIn = logIn;
+    }
+}
\ No newline at end of file
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javafx.application.Application;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ToggleButton;\r\nimport javafx.scene.control.ToggleGroup;\r\nimport javafx.scene.layout.BorderPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.stage.Stage;\r\nimport modules.board.BoardView;\r\nimport modules.chat.ChatView;\r\nimport modules.player.PlayerListView;\r\nimport modules.player.PlayerView;\r\n\r\nimport java.util.Stack;\r\nimport java.util.function.Consumer;\r\n\r\npublic class Main extends Application {\r\n\r\n    // 뒤로가기 버튼을 위한 스택\r\n    private final Stack<Pane> viewHistory = new Stack<>();\r\n\r\n    @Override\r\n    public void start(Stage stage) {\r\n        // 상단 토글버튼\r\n        ToggleGroup toggleGroup = new ToggleGroup(); // 토글 그룹\r\n        ToggleButton songBtn = new ToggleButton(\"노래\");\r\n        ToggleButton eqBtn = new ToggleButton(\"이퀄라이저\");\r\n        songBtn.setToggleGroup(toggleGroup);\r\n        eqBtn.setToggleGroup(toggleGroup);\r\n        HBox toggleBox = new HBox(10, songBtn, eqBtn);// 버튼들 사이간격\r\n        toggleBox.setAlignment(Pos.CENTER);// 내부 버튼들 가로 세로 모두 중앙 정렬\r\n        toggleBox.setPadding(new Insets(10)); // 상하좌우 여백 10px\r\n        // -----------------------------------\r\n\r\n        // 음악 플레이어\r\n        PlayerView playerView = new PlayerView(stage); // stage는 창(window)\r\n        //\r\n        PlayerListView playerListView = new PlayerListView(stage, playerView);\r\n\r\n        // 하단 버튼\r\n        Button homeBtn = new Button(\"Home\");\r\n        Button backBtn = new Button(\"Back\"); // 아직 보류\r\n        Button playListBtn = new Button(\"Play List\");\r\n        Button communityBtn = new Button(\"Community\");\r\n        Button chatBtn = new Button(\"Chat\");\r\n\r\n        HBox navBar = new HBox(20, homeBtn, playListBtn, communityBtn, chatBtn); // 버튼들 사이간격\r\n        navBar.setAlignment(Pos.CENTER); // 내부버튼들 똑같이 정중앙\r\n        navBar.setPadding(new Insets(20));// 상하좌우 여백\r\n\r\n        BorderPane root = new BorderPane(); // root라는 이름으로 BorderPane 레이아웃 생성\r\n        root.setTop(toggleBox); // 상단에는 토글\r\n        root.setCenter(playerView); // 중앙에는 플레이어\r\n        root.setBottom(navBar); // 하단에는 네비게이션 버튼(home, 커뮤니티, chat...)\r\n\r\n        // 버튼 액션\r\n        // home버튼\r\n        homeBtn.setOnAction(e -> {\r\n            viewHistory.clear();// 뒤로가기 스택 초기화\r\n            root.setCenter(playerView);\r\n        });\r\n\r\n\r\n        playListBtn.setOnAction(e -> {\r\n            viewHistory.push((Pane) root.getCenter());\r\n            root.setCenter(playerListView);\r\n        });\r\n        // back버튼\r\n        backBtn.setOnAction(e -> {\r\n            if (!viewHistory.isEmpty()) { // 스택안에 내용있을떄만 실행\r\n                Pane previous = viewHistory.pop();\r\n                root.setCenter(previous);\r\n            }\r\n        });\r\n        // 커뮤니티버튼\r\n        communityBtn.setOnAction(e -> {\r\n            viewHistory.push((Pane) root.getCenter());// 스택저장\r\n            // 콜백함수를 전달...\r\n            BoardView boardView = new BoardView(new Consumer<Node>() {\r\n                @Override\r\n                public void accept(Node newView) {\r\n                    viewHistory.push((Pane) root.getCenter());\r\n                    root.setCenter(newView);\r\n                }\r\n            });\r\n\r\n            root.setCenter(boardView);// 안에 내용을 boardView로 전환\r\n        });\r\n\r\n        chatBtn.setOnAction(e -> {\r\n            viewHistory.push((Pane) root.getCenter());// 스택저장\r\n            ChatView chatView = new ChatView();\r\n            root.setCenter(chatView); // 안에 내용을 chatView로 전환\r\n        });\r\n        // 화면을 지정하고, 크기도 함꼐 지정\r\n        Scene scene = new Scene(root, 400, 550);\r\n        // window label 지정\r\n        stage.setTitle(\"ColorGram\");\r\n        stage.setScene(scene); // 윈도우(창)에화면을 붙임.\r\n        stage.show();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        launch(args);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision 0a462eeb9af5a7e696a20de581688fe78e43cdee)
+++ b/src/Main.java	(date 1743639986822)
@@ -14,6 +14,7 @@
 import modules.chat.ChatView;
 import modules.player.PlayerListView;
 import modules.player.PlayerView;
+import modules.user.UserView;
 
 import java.util.Stack;
 import java.util.function.Consumer;
@@ -76,19 +77,28 @@
                 root.setCenter(previous);
             }
         });
+
+        // BoardView로 이동하는 공통 콜백 생성
+        Runnable boardViewCallback = () -> {
+            showBoardView(root);
+        };
+
         // 커뮤니티버튼
         communityBtn.setOnAction(e -> {
-            viewHistory.push((Pane) root.getCenter());// 스택저장
-            // 콜백함수를 전달...
-            BoardView boardView = new BoardView(new Consumer<Node>() {
-                @Override
-                public void accept(Node newView) {
-                    viewHistory.push((Pane) root.getCenter());
-                    root.setCenter(newView);
-                }
-            });
+            viewHistory.push((Pane) root.getCenter());// 현재 화면 스택에 저장
 
-            root.setCenter(boardView);// 안에 내용을 boardView로 전환
+            // 로그인 상태 확인
+            if (!UserView.isLogIn()) {
+                // 로그인 상태가 아니면 UserView를 보여줌
+                UserView userView = new UserView();
+                // UserView에서 로그인 성공 후 BoardView로 이동하기 위한 콜백 설정
+                userView.setOnLoginSuccess(boardViewCallback);
+                // 안에 내용을 boardView로 전환
+                root.setCenter(userView);
+            } else {
+                // 로그인 상태면 바로 BoardView를 보여줌
+                showBoardView(root);
+            }
         });
 
         chatBtn.setOnAction(e -> {
@@ -104,6 +114,18 @@
         stage.show();
     }
 
+    // BoardView 표시 헬퍼 메소드
+    private void showBoardView(BorderPane root) {
+        BoardView boardView = new BoardView(new Consumer<Node>() {
+            @Override
+            public void accept(Node newView) {
+                viewHistory.push((Pane) root.getCenter());
+                root.setCenter(newView);
+            }
+        });
+        root.setCenter(boardView);
+    }
+
     public static void main(String[] args) {
         launch(args);
     }
Index: src/modules/user/UserDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/user/UserDAO.java b/src/modules/user/UserDAO.java
new file mode 100644
--- /dev/null	(date 1743640175206)
+++ b/src/modules/user/UserDAO.java	(date 1743640175206)
@@ -0,0 +1,398 @@
+package modules.user;
+
+import database.ConnectionProvider;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+
+public class UserDAO {
+
+    // 회원가입 메소드
+    public boolean insertUser(UserVO user) {
+        Connection conn = null;
+        PreparedStatement pstmt = null;
+
+        try {
+            conn = ConnectionProvider.getConnection();
+
+            // 연결 실패 시 처리
+            if (conn == null) {
+                System.out.println("데이터베이스 연결 실패");
+                return false;
+            }
+
+            // 이메일이 null이거나 빈 문자열인 경우 이메일 값 없이 쿼리 작성
+            String sql;
+            if (user.getUserEmail() == null || user.getUserEmail().isEmpty()) {
+                sql = "INSERT INTO users (user_no, user_id, user_nickname, user_password) VALUES (userno_seq.NEXTVAL, ?, ?, ?)";
+                pstmt = conn.prepareStatement(sql);
+                pstmt.setString(1, user.getUserId());
+                pstmt.setString(2, user.getUserNickname());
+                pstmt.setString(3, user.getUserPassword());
+            } else {
+                sql = "INSERT INTO users (user_no, user_id, user_email, user_nickname, user_password) VALUES (userno_seq.NEXTVAL, ?, ?, ?, ?)";
+                pstmt = conn.prepareStatement(sql);
+                pstmt.setString(1, user.getUserId());
+                pstmt.setString(2, user.getUserEmail());
+                pstmt.setString(3, user.getUserNickname());
+                pstmt.setString(4, user.getUserPassword());
+            }
+
+            int result = pstmt.executeUpdate();
+            return result > 0;
+        } catch (Exception e) {
+            System.out.println("예외 발생: " + e.getMessage());
+            return false;
+        } finally {
+            ConnectionProvider.close(conn, pstmt);
+        }
+    }
+
+    // 회원 삭제 메소드
+    public boolean deleteUser(String id) {
+        Connection conn = null;
+        PreparedStatement pstmt = null;
+
+        try {
+            conn = ConnectionProvider.getConnection();
+
+            // 연결 실패 시 처리
+            if (conn == null) {
+                System.out.println("데이터베이스 연결 실패");
+                return false;
+            }
+
+            String sql = "DELETE FROM users WHERE user_id = ?";
+            pstmt = conn.prepareStatement(sql);
+            pstmt.setString(1, id);
+
+            int result = pstmt.executeUpdate();
+            return result > 0;
+        } catch (Exception e) {
+            System.out.println("예외 발생: " + e.getMessage());
+            return false;
+        } finally {
+            ConnectionProvider.close(conn, pstmt);
+        }
+    }
+
+    // 로그인 확인
+    public boolean selectUserLogin(String id, String password) {
+        Connection conn = null;
+        PreparedStatement pstmt = null;
+        ResultSet rs = null;
+
+        try {
+            conn = ConnectionProvider.getConnection();
+
+            // 연결 실패 시 처리
+            if (conn == null) {
+                System.out.println("데이터베이스 연결 실패");
+                return false;
+            }
+
+            String sql = "SELECT * FROM users WHERE user_id = ? AND user_password = ?";
+            pstmt = conn.prepareStatement(sql);
+
+            pstmt.setString(1, id);
+            pstmt.setString(2, password);
+
+            rs = pstmt.executeQuery();
+
+            return rs.next(); // 결과가 있으면 true, 없으면 false
+        } catch (Exception e) {
+            System.out.println("예외 발생: " + e.getMessage());
+            return false;
+        } finally {
+            ConnectionProvider.close(conn, pstmt, rs);
+        }
+    }
+
+    // 사용자 정보 조회 메소드
+    public UserVO selectUser(String id) {
+        Connection conn = null;
+        PreparedStatement pstmt = null;
+        ResultSet rs = null;
+
+        try {
+            conn = ConnectionProvider.getConnection();
+
+            // 연결 실패 시 처리
+            if (conn == null) {
+                System.out.println("데이터베이스 연결 실패");
+                return null;
+            }
+
+            String sql = "SELECT * FROM users WHERE user_id = ?";
+            pstmt = conn.prepareStatement(sql);
+
+            pstmt.setString(1, id);
+
+            rs = pstmt.executeQuery();
+
+            if (rs.next()) {
+                UserVO user = new UserVO();
+                user.setUserNo(rs.getInt("user_no"));
+                user.setUserNickname(rs.getString("user_nickname"));
+                user.setUserId(rs.getString("user_id"));
+                user.setUserPassword(rs.getString("user_password"));
+                user.setUserEmail(rs.getString("user_email"));
+                return user;
+            }
+            return null;
+        } catch (Exception e) {
+            System.out.println("예외 발생: " + e.getMessage());
+            return null;
+        } finally {
+            ConnectionProvider.close(conn, pstmt, rs);
+        }
+    }
+
+
+    // 닉네임 업데이트
+    public boolean updateUserNickname(String id, String newNickname) {
+        Connection conn = null;
+        PreparedStatement pstmt = null;
+
+        try {
+            conn = ConnectionProvider.getConnection();
+
+            // 연결 실패 시 처리
+            if (conn == null) {
+                System.out.println("데이터베이스 연결 실패");
+                return false;
+            }
+
+            String sql = "UPDATE users SET user_nickname = ? WHERE user_id = ?";
+            pstmt = conn.prepareStatement(sql);
+
+            pstmt.setString(1, newNickname);
+            pstmt.setString(2, id);
+
+            int result = pstmt.executeUpdate();
+            return result > 0;
+        } catch (Exception e) {
+            System.out.println("예외 발생: " + e.getMessage());
+            return false;
+        } finally {
+            ConnectionProvider.close(conn, pstmt);
+        }
+    }
+
+    // 이메일 업데이트
+    public boolean updateUserEmail(String id, String newEmail) {
+        Connection conn = null;
+        PreparedStatement pstmt = null;
+
+        try {
+            conn = ConnectionProvider.getConnection();
+
+            // 연결 실패 시 처리
+            if (conn == null) {
+                System.out.println("데이터베이스 연결 실패");
+                return false;
+            }
+
+            String sql;
+            if (newEmail == null || newEmail.isEmpty()) {
+                // 이메일을 NULL로 업데이트
+                sql = "UPDATE users SET user_email = NULL WHERE user_id = ?";
+                pstmt = conn.prepareStatement(sql);
+                pstmt.setString(1, id);
+            } else {
+                // 새 이메일로 업데이트
+                sql = "UPDATE users SET user_email = ? WHERE user_id = ?";
+                pstmt = conn.prepareStatement(sql);
+                pstmt.setString(1, newEmail);
+                pstmt.setString(2, id);
+            }
+
+            int result = pstmt.executeUpdate();
+            return result > 0;
+        } catch (Exception e) {
+            System.out.println("예외 발생: " + e.getMessage());
+            return false;
+        } finally {
+            ConnectionProvider.close(conn, pstmt);
+        }
+    }
+
+    // 비밀번호 업데이트
+    public boolean updateUserPassword(String id, String newPassword) {
+        Connection conn = null;
+        PreparedStatement pstmt = null;
+
+        try {
+            conn = ConnectionProvider.getConnection();
+
+            // 연결 실패 시 처리
+            if (conn == null) {
+                System.out.println("데이터베이스 연결 실패");
+                return false;
+            }
+
+            String sql = "UPDATE users SET user_password = ? WHERE user_id = ?";
+            pstmt = conn.prepareStatement(sql);
+
+            pstmt.setString(1, newPassword);
+            pstmt.setString(2, id);
+
+            int result = pstmt.executeUpdate();
+            return result > 0;
+        } catch (Exception e) {
+            System.out.println("예외 발생: " + e.getMessage());
+            return false;
+        } finally {
+            ConnectionProvider.close(conn, pstmt);
+        }
+    }
+
+    // 아이디 업데이트
+    public boolean updateUserId(String oldId, String newId) {
+        Connection conn = null;
+        PreparedStatement pstmt = null;
+        ResultSet rs = null;
+
+        try {
+            conn = ConnectionProvider.getConnection();
+
+            // 연결 실패 시 처리
+            if (conn == null) {
+                System.out.println("데이터베이스 연결 실패");
+                return false;
+            }
+
+            // 먼저 새 아이디가 이미 사용 중인지 확인
+            String checkSql = "SELECT COUNT(*) FROM users WHERE user_id = ?";
+            pstmt = conn.prepareStatement(checkSql);
+            pstmt.setString(1, newId);
+            rs = pstmt.executeQuery();
+
+            if (rs.next() && rs.getInt(1) > 0) {
+                // 이미 사용 중인 아이디인 경우
+                System.out.println("이미 사용 중인 아이디입니다: " + newId);
+                return false;
+            }
+
+            // 아이디 업데이트 진행
+            ConnectionProvider.close(null, pstmt, rs);
+            String sql = "UPDATE users SET user_id = ? WHERE user_id = ?";
+            pstmt = conn.prepareStatement(sql);
+
+            pstmt.setString(1, newId);
+            pstmt.setString(2, oldId);
+
+            int result = pstmt.executeUpdate();
+            return result > 0;
+        } catch (Exception e) {
+            System.out.println("예외 발생: " + e.getMessage());
+            return false;
+        } finally {
+            ConnectionProvider.close(conn, pstmt, rs);
+        }
+    }
+
+    // 닉네임 중복 검사
+    public boolean selectIsUserNicknameDupe(String nickname) {
+        Connection conn = null;
+        PreparedStatement pstmt = null;
+        ResultSet rs = null;
+
+        try {
+            conn = ConnectionProvider.getConnection();
+
+            // 연결 실패 시 처리
+            if (conn == null) {
+                System.out.println("데이터베이스 연결 실패");
+                return false;
+            }
+
+            String sql = "SELECT COUNT(*) FROM users WHERE user_nickname = ?";
+            pstmt = conn.prepareStatement(sql);
+            pstmt.setString(1, nickname);
+
+            rs = pstmt.executeQuery();
+
+            if (rs.next()) {
+                // 0이면 사용 가능, 0보다 크면 이미 사용중
+                return rs.getInt(1) == 0;
+            }
+            return false;
+        } catch (Exception e) {
+            System.out.println("예외 발생: " + e.getMessage());
+            return false;
+        } finally {
+            ConnectionProvider.close(conn, pstmt, rs);
+        }
+    }
+
+    // 아이디 중복 검사
+    public boolean isUserIdDupe(String id) {
+        Connection conn = null;
+        PreparedStatement pstmt = null;
+        ResultSet rs = null;
+
+        try {
+            conn = ConnectionProvider.getConnection();
+
+            // 연결 실패 시 처리
+            if (conn == null) {
+                System.out.println("데이터베이스 연결 실패");
+                return false;
+            }
+
+            String sql = "SELECT COUNT(*) FROM users WHERE user_id = ?";
+            pstmt = conn.prepareStatement(sql);
+            pstmt.setString(1, id);
+
+            rs = pstmt.executeQuery();
+
+            if (rs.next()) {
+                // 0이면 사용 가능, 0보다 크면 이미 사용중
+                return rs.getInt(1) == 0;
+            }
+            return false;
+        } catch (Exception e) {
+            System.out.println("예외 발생: " + e.getMessage());
+            return false;
+        } finally {
+            ConnectionProvider.close(conn, pstmt, rs);
+        }
+    }
+
+    // 이메일 중복 검사
+    public boolean isUserEmailDupe(String email) {
+        Connection conn = null;
+        PreparedStatement pstmt = null;
+        ResultSet rs = null;
+
+        try {
+            conn = ConnectionProvider.getConnection();
+
+            // 연결 실패 시 처리
+            if (conn == null) {
+                System.out.println("데이터베이스 연결 실패");
+                return false;
+            }
+
+            String sql = "SELECT COUNT(*) FROM users WHERE user_email = ?";
+            pstmt = conn.prepareStatement(sql);
+            pstmt.setString(1, email);
+
+            rs = pstmt.executeQuery();
+
+            if (rs.next()) {
+                // 0이면 사용 가능, 0보다 크면 이미 사용중
+                return rs.getInt(1) == 0;
+            }
+            return false;
+        } catch (Exception e) {
+            System.out.println("예외 발생: " + e.getMessage());
+            return false;
+        } finally {
+            ConnectionProvider.close(conn, pstmt, rs);
+        }
+    }
+
+}
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1743639986853)
+++ b/.gitignore	(date 1743639986853)
@@ -0,0 +1,29 @@
+### IntelliJ IDEA ###
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: src/modules/user/UserVO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/user/UserVO.java b/src/modules/user/UserVO.java
new file mode 100644
--- /dev/null	(date 1743639986840)
+++ b/src/modules/user/UserVO.java	(date 1743639986840)
@@ -0,0 +1,58 @@
+package modules.user;
+
+public class UserVO {
+    private int userNo;
+    private String userNickname;
+    private String userId;
+    private String userPassword;
+    private String userEmail;
+
+    public UserVO() {
+        super();
+    }
+
+    public UserVO(String userId, String userPassword) {
+        this.userId = userId;
+        this.userPassword = userPassword;
+    }
+
+    public int getUserNo() {
+        return userNo;
+    }
+
+    public void setUserNo(int userNo) {
+        this.userNo = userNo;
+    }
+
+    public String getUserNickname() {
+        return userNickname;
+    }
+
+    public void setUserNickname(String userNickname) {
+        this.userNickname = userNickname;
+    }
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    public String getUserPassword() {
+        return userPassword;
+    }
+
+    public void setUserPassword(String userPassword) {
+        this.userPassword = userPassword;
+    }
+
+    public String getUserEmail() {
+        return userEmail;
+    }
+
+    public void setUserEmail(String userEmail) {
+        this.userEmail = userEmail;
+    }
+}
